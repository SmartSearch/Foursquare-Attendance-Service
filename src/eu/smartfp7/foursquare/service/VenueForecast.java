package eu.smartfp7.foursquare.service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

import eu.smartfp7.foursquare.TimeSeriesItem;
import eu.smartfp7.foursquare.VenueUtil;

/**
 * [Copyright and License]
 */

/**
 * This class describes the forecast for a venue as a time series.
 * It takes a file generated by the batch R process as an input 
 * (see https://github.com/SmartSearch/Foursquare-Attendance-Forecasting).
 * 
 * 
 * @author Romain Deveaud <romain.deveaud at glasgow.ac.uk>
 */

public class VenueForecast {
  
  // the neural networks forecast represented as a time series
  Collection<TimeSeriesItem<Double>> neural_nets;
  
  public VenueForecast(String file) throws IOException {
	neural_nets = new ArrayList<TimeSeriesItem<Double>>();
	BufferedReader buffer_forecast = new BufferedReader(new FileReader(file));
	String tmp;
	while((tmp = buffer_forecast.readLine()) != null) {
	  String[] line = tmp.split(",");
	  TimeSeriesItem<Double> item = new TimeSeriesItem<Double>(line[0], Double.parseDouble(line[1]));
	  neural_nets.add(item);
	}
	
	buffer_forecast.close();
  }

  public long getLastPointTime() {
	return ((ArrayList<TimeSeriesItem<Double>>) neural_nets).get(neural_nets.size()-1).getTimeInMilis();
  }
  
  public void firstStepProbs(Double mu, Double back_prob) {
	for(TimeSeriesItem<Double> item: neural_nets) {
	  item.setProb(item.getValue() + mu*back_prob);
	}
  }
  
  public void secondStepProbs(Double mu, VenueForecast sum) {
	for(int i = 0 ; i < this.neural_nets.size() ; ++i) {
	  TimeSeriesItem<Double> item = ((ArrayList<TimeSeriesItem<Double>>) this.neural_nets).get(i);
	  item.setProb(item.getProb()/(((ArrayList<TimeSeriesItem<Double>>) sum.neural_nets).get(i).getValue()+mu));
	}
  }
  

  public void add (VenueForecast v) {
	//Collection<TimeSeriesItem<Double>> new_neural = new ArrayList<TimeSeriesItem<Double>>();
	
	for(int i = 0 ; i < this.neural_nets.size() ; ++i) {
	  TimeSeriesItem<Double> item  = ((ArrayList<TimeSeriesItem<Double>>) this.neural_nets).get(i);
	  TimeSeriesItem<Double> vitem = ((ArrayList<TimeSeriesItem<Double>>) v.neural_nets).get(i);
	  item.setValue(item.getValue()+(vitem.getValue().isNaN() ? 0 : vitem.getValue()));
	  //new_neural.add(item);
	}
	
	//v.neural_nets = new_neural;
	
	//return v;
  }
  
  public static VenueForecast computeBackgroundForecast(String folder, String city) throws IOException {
	VenueForecast sum_forecast = null;
	
	for(File file: VenueUtil.getAllFilesEndingWith(folder+"/"+city+"_forecasts/live_arima", ".forecast")) {
	  VenueForecast forecast = new VenueForecast(file.getAbsolutePath());
	  if(sum_forecast == null)
		sum_forecast = forecast;
	  else
		sum_forecast.add(forecast);
	}
	
	return sum_forecast;
  }


}
